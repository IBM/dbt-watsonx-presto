# Builds the presto plugin and releases it to GitHub and Pypi
name: Build and Release

on:
  workflow_dispatch:

jobs:
  Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Test release
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install -r dev_requirements.txt
          pip install twine wheel setuptools
          python setup.py sdist bdist_wheel
          pip install dist/dbt-watsonx-presto-*.tar.gz
          pip install dist/dbt_watsonx_presto-*-py3-none-any.whl
          twine check dist/dbt_watsonx_presto-*-py3-none-any.whl dist/dbt-watsonx-presto-*.tar.gz

  GitHubRelease:
    name: GitHub release
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Get version
        run: echo "version_number=$(cat dbt/adapters/watsonx_presto/__version__.py | sed -n 's/version = "\(.*\)\"/\1/p')" >> $GITHUB_ENV

      - name: Bumping version
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install -r dev_requirements.txt
          bumpversion --config-file .bumpversion-dbt.cfg patch --new-version ${{env.version_number}}
          bumpversion --config-file .bumpversion.cfg patch --new-version ${{env.version_number}} --allow-dirty
          git status

      - name: Commit version bump and tag
        run: |
          git config --global user.name "KNagaVivek"
          git config --global user.email "Karnati.Naga.Vivek@ibm.com"

          git add .bumpversion-dbt.cfg .bumpversion.cfg
          git commit -m "Bumping version to ${{ env.version_number }}"
          git tag v${{ env.version_number }}
          git push origin main
          git push origin v${{ env.version_number }}

      # Need to set an output variable because env variables can't be taken as input
      # This is needed for the next step with releasing to GitHub
      - name: Find release type
        id: release_type
        env:
          IS_PRERELEASE: ${{ contains(env.version_number, 'rc') ||  contains(env.version_number, 'b') }}
        run: |
          echo ::set-output name=isPrerelease::$IS_PRERELEASE

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{env.version_number}}
          release_name: v${{env.version_number}}
          prerelease: ${{ steps.release_type.outputs.isPrerelease }}
          body: |
            [Release notes](https://github.com/IBM/dbt-watsonx-presto/blob/main/CHANGELOG.md)
            ```sh
            $ pip install dbt-watsonx-presto==${{env.version_number}}
            ```

  PypiRelease:
    name: Pypi release
    runs-on: ubuntu-latest
    needs: GitHubRelease
    environment: PypiProd
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Get version
        run: echo "version_number=$(cat dbt/adapters/watsonx_presto/__version__.py | sed -n 's/version = "\(.*\)\"/\1/p')" >> $GITHUB_ENV

      - name: Release to pypi
        env:
          TWINE_USERNAME:  __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install -r dev_requirements.txt
          pip install twine wheel setuptools
          python setup.py sdist bdist_wheel
          twine upload --non-interactive dist/*
          
